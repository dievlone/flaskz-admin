"""Model示例"""
from datetime import datetime

from flaskz import res_status_codes
from flaskz.log import flaskz_logger
from flaskz.models import ModelMixin, ModelBase, db_session
from sqlalchemy import Column, Integer, String, DateTime, Text, ForeignKey, Boolean
from sqlalchemy.orm import relationship

from .device_apply import DeviceNSOApply, AuthGroupNSOApply
from ..model import ModelNSOMixin


class DeviceVendor(ModelBase, ModelMixin):
    """
    厂商
    """
    __tablename__ = 'device_vendors'
    id = Column(Integer, primary_key=True, autoincrement=True)
    # 厂商名称 思科/华为/F5
    name = Column(String(32), unique=True, nullable=False)
    # 厂商类型，是防火墙厂商还是路由器厂商
    models = relationship("DeviceModel", cascade='all,delete-orphan')  # 删除设备，删除model


class DeviceModel(ModelBase, ModelMixin):
    """
    型号
    一个厂商，有多个型号1vN
    """
    __tablename__ = 'device_models'
    id = Column(Integer, primary_key=True, autoincrement=True)
    # 厂商ID
    vendor_id = Column(Integer, ForeignKey("device_vendors.id", ondelete='CASCADE'), nullable=False)
    # 设备型号编码
    code = Column(String(32), unique=True, nullable=False)
    # 设备型号名称 ASA/USD6000/Big-IP
    name = Column(String(32), nullable=False)
    # 设备类型，firewall/switch/router
    type = Column(String(32))

    ned = relationship("DeviceNed", uselist=False, cascade='all,delete-orphan', lazy='joined')  # 删除设备，删除model
    # 由厂商+型号确定ned及设备管理类型cli/netconf/generic
    # 厂商类型，是防火墙厂商还是路由器厂商
    # type = Column(String(32), nullable=False)


class DeviceNed(ModelBase, ModelMixin):
    """
    设备NED
    用于配置下发
    """
    __tablename__ = 'device_neds'
    id = Column(Integer, primary_key=True, autoincrement=True)
    # Manufacturer.code+DeviceModel.code
    model_id = Column(Integer, ForeignKey("device_models.id", ondelete='CASCADE'), nullable=False)
    # ned name
    name = Column(String(255), nullable=False)
    # type:'cli|netconf|generic'
    type = Column(String(32), nullable=False)
    # oper ned name
    oper_name = Column(String(255))


class DeviceAuth(ModelBase, ModelNSOMixin, ModelMixin):
    """
    授权组
    """
    __tablename__ = 'device_auths'
    id = Column(Integer, primary_key=True, autoincrement=True)
    name = Column(String(32), unique=True, nullable=False)
    username = Column(String(32), nullable=False)
    password = Column(String(32), nullable=False)
    enable_password = Column(String(32))
    description = Column(Text())
    created_at = Column(DateTime(), default=datetime.now)
    updated_at = Column(DateTime(), default=datetime.now, onupdate=datetime.now)

    def to_dict(*args, **kwargs):
        result = super(DeviceAuth, args[0]).to_dict(**kwargs)
        password = result.get("password")
        if password:
            result['password'] = password[0] + '*' * 6 + password[-1]
        enable_password = result.get("enable_password")
        if enable_password:
            result['enable_password'] = enable_password[0] + '*' * 6 + enable_password[-1]
        return result

    @classmethod
    def get_nso_apply(cls):
        return AuthGroupNSOApply


class Device(ModelBase, ModelNSOMixin, ModelMixin):
    """
    设备列表
    设备信息 = 管理信息+采集信息
    """
    __tablename__ = 'device_devices'
    # ---------------------------------------管理信息---------------------------------------
    id = Column(Integer, primary_key=True, autoincrement=True)
    # 管理名称
    name = Column(String(32), unique=True, nullable=False)
    # 主机名
    hostname = Column(String(32))
    # 厂商
    vendor_id = Column(Integer, ForeignKey("device_vendors.id"))
    # 设备型号
    model_id = Column(Integer, ForeignKey("device_models.id"))
    # 是否纳管，如果不纳管，则地址等信息可以为空
    in_mgmt = Column(Boolean, default=False)
    # 管理地址 10.124.133.133
    ip_address = Column(String(32))
    # 管理协议ssh/telnet
    protocol = Column(String(32))
    # 管理端口
    port = Column(Integer)
    # 授权组
    auth_id = Column(Integer, ForeignKey("device_auths.id"))  # 不能为空，删除AuthGroup时，如果使用中，则删除失败
    # ---------------------------------------通用信息---------------------------------------
    description = Column(Text())
    created_at = Column(DateTime(), default=datetime.now)
    updated_at = Column(DateTime(), default=datetime.now, onupdate=datetime.now)
    # ---------------------------------------关联数据---------------------------------------
    model = relationship(DeviceModel, uselist=False, lazy='joined')
    vendor = relationship(DeviceVendor, uselist=False, lazy='joined')
    plane_settings = relationship("DevicePlaneSetting", primaryjoin='Device.id == DevicePlaneSetting.device_id', cascade="all,delete-orphan", lazy='joined')

    @classmethod
    def get_nso_data(cls, json_data, op_type):
        auth = DeviceAuth.query_by_pk(json_data.get('auth_id'))
        if auth is None:
            return None
        dev_model = DeviceModel.query_by_pk(json_data.get("model_id"))
        if dev_model is None:
            return None
        json_data['auth'] = {'id': auth.id, 'name': auth.name}
        json_data['ned'] = {'type': dev_model.ned.type, 'name': dev_model.ned.name,
                            'oper_name': dev_model.ned.oper_name}
        return json_data

    @classmethod
    def get_nso_apply(cls):
        return DeviceNSOApply

    @classmethod
    def before_add(cls, json_data, preview=False):
        try:
            dev_model = DeviceModel.query_by_pk(json_data.get("model_id"))
            if dev_model:
                ned = dev_model.ned
                if ned.type != 'cli':
                    json_data.pop('protocol', None)
        except Exception as e:
            flaskz_logger.exception(e)
            return res_status_codes.db_add_err

        if json_data.get('in_mgmt') is not True:
            return True

        return super().before_add(json_data, preview)

    @classmethod
    def before_update(cls, json_data, preview=False):
        id_ = json_data.get('id')
        ins = cls.query_by_pk(id_)
        old_mgmt = ins.in_mgmt
        new_mgmt = json_data.get('in_mgmt')

        if old_mgmt is False and new_mgmt is False:
            return True
        if old_mgmt is True and new_mgmt is False:
            return cls.before_delete(id_, preview)
        if old_mgmt is False and new_mgmt is True:
            return cls.before_add(json_data, preview)

        return super().before_update(json_data, preview)

    @staticmethod
    def query_by_model(model):
        try:
            with db_session(do_commit=False) as session:
                query = session.query(Device).join(DeviceModel).filter(DeviceModel.code == model)
                query_order = Device.get_query_default_order()
                if query_order is not None:
                    query = query.order_by(query_order)
                result = query.all()
            return True, result
        except Exception as e:
            flaskz_logger.exception(e)
            return False, res_status_codes.db_query_err

    @staticmethod
    def query_by_type(device_type):
        try:
            with db_session(do_commit=False) as session:
                query = session.query(Device).join(DeviceModel).filter(DeviceModel.type == device_type)
                query_order = Device.get_query_default_order()
                if query_order is not None:
                    query = query.order_by(query_order)
                result = query.all()
            return True, result
        except Exception as e:
            flaskz_logger.exception(e)
            return False, res_status_codes.db_query_err
